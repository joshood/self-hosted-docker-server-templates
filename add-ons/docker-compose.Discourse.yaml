#This compose file adds Discourse https://www.discourse.org/ to your stack
#Useful documentation for the bitnami Discourse image:
# https://docs.bitnami.com/installer/apps/discourse/
#You can run administrative commands inside the container like this:
#RAILS_ENV=production bundle exec rake yourcommand
#run RAILS_ENV=production bundle exec rake -T inside container for available commands
#useful for forcing administrative actions without email confirmation
version: '3.5'
services:
  reverse-proxy:
    networks:
      - discourse-external

  mail-relay:
    networks:
      - discourse-internal

  discourse:
    image: bitnami/discourse:latest
    container_name: discourse
    environment:
      DISCOURSE_EMAIL: ${DISCOURSE_EMAIL:?Please copy template.env to .env and provide provide a value for DISCOURSE_EMAIL}
      DISCOURSE_HOST: discourse
      DISCOURSE_PASSWORD: ${DISCOURSE_PASSWORD:?Please copy template.env to .env and provide provide a value for DISCOURSE_PASSWORD}
      DISCOURSE_PORT: 3000
      DISCOURSE_POSTGRESQL_NAME: ${DISCOURSE_POSTGRESQL_NAME:-discourse}
      DISCOURSE_POSTGRESQL_PASSWORD: ${DISCOURSE_POSTGRESQL_PASSWORD:?Please copy template.env to .env and provide provide a value for DISCOURSE_POSTGRESQL_PASSWORD}
      DISCOURSE_POSTGRESQL_USERNAME: ${DISCOURSE_POSTGRESQL_USERNAME:?Please copy template.env to .env and provide provide a value for DISCOURSE_POSTGRESQL_NAME}
      DISCOURSE_SITE_NAME: ${DISCOURSE_SITE_NAME:-"My Discourse Forum"}
      DISCOURSE_USERNAME: ${DISCOURSE_ADMIN_USERNAME:?Please copy template.env to .env and provide provide a value for DISCOURSE_ADMIN_USERNAME}
      POSTGRESQL_CLIENT_CREATE_DATABASE_NAME: ${DISCOURSE_POSTGRESQL_NAME}
      POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD: ${DISCOURSE_POSTGRESQL_PASSWORD}
      POSTGRESQL_CLIENT_CREATE_DATABASE_USERNAME: ${DISCOURSE_POSTGRESQL_USERNAME}
      POSTGRESQL_HOST: discourse-db
      POSTGRESQL_PORT_NUMBER: 5432
      POSTGRESQL_ROOT_PASSWORD: ${DISCOURSE_POSTGRESQL_ROOT_PASSWORD:?Please copy template.env to .env and provide provide a value for DISCOURSE_POSTGRESQL_ROOT_PASSWORD}
      POSTGRESQL_ROOT_USER: postgres
      REDIS_HOST: discourse-redis
      REDIS_PASSWORD: ${DISCOURSE_REDIS_PASSWORD:-""}
      REDIS_PORT_NUMBER: 6379
      SMTP_HOST: ${DISCOURSE_SMTP_HOST:-mail-relay}
      SMTP_PASSWORD: ${DISCOURSE_SMTP_PASSWORD:-""}
      SMTP_PORT: ${DISCOURSE_SMTP_PORT:-25}
      SMTP_TLS: ${DISCOURSE_SMTP_TLS:-true}
      SMTP_USER: ${DISCOURSE_SMTP_USER:-""}
    volumes:
      - discourse-data:/bitnami
    labels:
      - traefik.enable=true
      - traefik.port=3000
      - traefik.frontend.rule=Host:${DISCOURSE_DOMAIN:?Please copy template.env to .env and provide provide a value for DISCOURSE_DOMAIN}
      - traefik.docker.network=discourse
      - traefik.default.protocol=http
      #FYI this image takes ~5 minutes to check the DB when it is recreated
      #if that is disruptive, either disable watchtower for this and the sidekiq image
      #or set watchtower to run only when you can afford momentary downtime
      #if the upstream image updates
      - "com.ouroboros.enable=true"
    networks:
      - discourse-external
      - discourse-internal
    restart: unless-stopped
    expose:
      - "3000"
    depends_on:
      - discourse-db
      - discourse-redis
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://discourse:3000 || exit 1"] #checking local connectivity
      interval: 1m30s
      timeout: 10s
      retries: 5
      start_period: 120s #this container takes a while to migrate its database ever time it starts

  discourse-db:
    image: bitnami/postgresql:10
    container_name: discourse-db
    restart: unless-stopped
    networks:
      - discourse-internal
    volumes:
      - discourse-db-data:/bitnami
    labels:
      - traefik.enable=false
      #only ok because postgres version is fixed, otherwise should be false or manual migrations need to be done on major updates
      - com.ouroboros.enable=true
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DISCOURSE_POSTGRESQL_USERNAME:-postgres}"] #checking local connectivity
      interval: 10s
      timeout: 5s
      retries: 5

  discourse-redis:
    restart: unless-stopped
    container_name: discourse-redis
    image: bitnami/redis:4.0
    environment:
      ALLOW_EMPTY_PASSWORD: yes
      REDIS_PASSWORD: ${DISCOURSE_REDIS_PASSWORD:-""}
    networks:
      - discourse-internal
    labels:
      - traefik.enable=false
      - com.ouroboros.enable=true
    volumes:
      - discourse-redis-data:/bitnami/redis/data

  discourse-sidekiq:
    container_name: discourse-sidekiq
    image: bitnami/discourse:latest
    env_file: ./configs/discourse.env
    restart: unless-stopped
    command: nami start --foreground discourse-sidekiq
    depends_on:
      - discourse-db
      - discourse-redis
      - discourse
    networks:
      - discourse-external
      - discourse-internal
    volumes:
      - discourse-data:/bitnami
    labels:
      - traefik.enable=false
      #see the above note on discourse service.  the two should be the same image at all times!
      - com.ouroboros.enable=true

networks:
  discourse-internal:
    internal: true
  discourse-external:

volumes:
  discourse-db-data:
  discourse-redis-data:
  discourse-data:
